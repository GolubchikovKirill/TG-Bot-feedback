#bot/handlers/messages.py
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from keyboards.reply import ReplyKeyboardManager
from keyboards.inline import InlineKeyboardManager
from database import feedback_repository

logger = logging.getLogger(__name__)

class MessageHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
    def __init__(self):
        self.router = Router()
        self.reply_keyboard = ReplyKeyboardManager()
        self.inline_keyboard = InlineKeyboardManager()
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.router.message.register(self.start_command_handler, Command("start"))
        self.router.message.register(self.feedback_message, F.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
        self.router.message.register(self.help_command_handler, Command("help"))
        self.router.message.register(self.help_command_handler, F.text == "–ü–æ–º–æ—â—å")
        self.router.message.register(self.stats_command_handler, Command("stats"))
        self.router.message.register(self.recommendations_message, F.text == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

    async def start_command_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            await message.answer(
                "<b>–£–≤–∞–∂–∞–µ–º—ã–π —Å—Ç—É–¥–µ–Ω—Ç! –Ø <s>–±–æ—Ç</s> –∫–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.</b>\n"
                "<b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–º, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏/–∏–ª–∏ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>",
                parse_mode="HTML",
                reply_markup=self.reply_keyboard.get_main_keyboard()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start: {e}")
            await self._handle_error(message)

    async def feedback_message(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'"""
        try:
            await message.answer(
                "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.</b>",
                parse_mode="HTML",
                reply_markup=self.inline_keyboard.get_feedback_keyboard()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await self._handle_error(message)
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await self._handle_error(message)

    async def help_command_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            await message.answer(
                "<b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É -–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å-.</b>\n"
                "<b>–í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.</b>\n"
                "<b>–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.</b>\n"
                "<b>–ö–Ω–æ–ø–∫–∞ -–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏- –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</b>",
                parse_mode="HTML",
                reply_markup=self.reply_keyboard.get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏: {e}")
            await self._handle_error(message)

    async def stats_command_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            stats = feedback_repository.get_feedback_stats()
            await message.answer(
                "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:</b>\n\n"
                f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats['total']}\n"
                f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {stats['likes']}\n"
                f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é: {stats['improvements']}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def recommendations_message(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'"""
        await message.answer(
            "üîÑ –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
            reply_markup=self.reply_keyboard.get_main_keyboard()
        )

    async def _handle_error(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=self.reply_keyboard.get_main_keyboard()
        )

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
message_handler = MessageHandler()
router = message_handler.router
